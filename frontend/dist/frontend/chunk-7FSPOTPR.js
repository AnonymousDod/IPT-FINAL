import{Ha as p,b as c,e as i,ea as h,j as l,m as u,o as a}from"./chunk-AFLXQZBF.js";import{a as n}from"./chunk-2XJVAMHT.js";var g={production:!1,apiUrl:"http://localhost:4000",useFakeBackend:!1};var r=`${g.apiUrl}/accounts`,I=(()=>{class s{constructor(e,o){this.router=e,this.http=o;let t=localStorage.getItem("currentUser"),m=t?JSON.parse(t):null;this.accountSubject=new c(m),this.account=this.accountSubject.asObservable()}get accountValue(){return this.accountSubject.value}login(e,o){return this.http.post(`${r}/authenticate`,{email:e,password:o},{withCredentials:!0}).pipe(i(t=>(localStorage.setItem("currentUser",JSON.stringify(t)),this.accountSubject.next(t),this.startRefreshTokenTimer(),t)))}logout(){console.log("Starting logout process..."),console.log("Current localStorage before logout:",{accounts:localStorage.getItem("angular-18-signup-verification-boilerplate-accounts"),currentUser:localStorage.getItem("currentUser"),refreshToken:localStorage.getItem("refreshToken")}),this.http.post(`${r}/revoke-token`,{},{withCredentials:!0}).subscribe({next:()=>{console.log("Token revoked successfully"),this.stopRefreshTokenTimer(),this.accountSubject.next(null),localStorage.removeItem("angular-18-signup-verification-boilerplate-accounts"),localStorage.removeItem("currentUser"),localStorage.removeItem("refreshToken"),console.log("LocalStorage after logout:",{accounts:localStorage.getItem("angular-18-signup-verification-boilerplate-accounts"),currentUser:localStorage.getItem("currentUser"),refreshToken:localStorage.getItem("refreshToken")}),this.router.navigate(["/account/login"])},error:e=>{console.error("Logout error:",e),this.stopRefreshTokenTimer(),this.accountSubject.next(null),localStorage.removeItem("angular-18-signup-verification-boilerplate-accounts"),localStorage.removeItem("currentUser"),localStorage.removeItem("refreshToken"),console.log("LocalStorage after error logout:",{accounts:localStorage.getItem("angular-18-signup-verification-boilerplate-accounts"),currentUser:localStorage.getItem("currentUser"),refreshToken:localStorage.getItem("refreshToken")}),this.router.navigate(["/account/login"])}})}refreshToken(){return this.http.post(`${r}/refresh-token`,{},{withCredentials:!0}).pipe(i(e=>(localStorage.setItem("currentUser",JSON.stringify(e)),this.accountSubject.next(e),this.startRefreshTokenTimer(),e)))}register(e){return this.http.post(`${r}/register`,e)}verifyEmail(e){return this.http.post(`${r}/verify-email`,{token:e})}forgotPassword(e){return this.http.post(`${r}/forgot-password`,{email:e})}validateResetToken(e){return this.http.post(`${r}/validate-reset-token`,{token:e})}resetPassword(e,o,t){return this.http.post(`${r}/reset-password`,{token:e,password:o,confirmPassword:t})}getAll(){return this.http.get(r)}getById(e){return this.http.get(`${r}/${e}`)}update(e,o){return this.http.put(`${r}/${e}`,o).pipe(i(t=>(t.id===this.accountValue?.id&&(t=n(n({},this.accountValue),t),this.accountSubject.next(t)),t)))}delete(e){return this.http.delete(`${r}/${e}`).pipe(l(()=>{e===this.accountValue?.id&&this.logout()}))}create(e){return this.http.post(`${r}`,e)}startRefreshTokenTimer(){if(!this.accountValue?.jwtToken)return;let e=JSON.parse(atob(this.accountValue.jwtToken.split(".")[1])),t=new Date(e.exp*1e3).getTime()-Date.now()-60*1e3;this.refreshTokenTimeout=setTimeout(()=>{this.refreshToken().subscribe()},t)}stopRefreshTokenTimer(){clearTimeout(this.refreshTokenTimeout)}static{this.\u0275fac=function(o){return new(o||s)(a(p),a(h))}}static{this.\u0275prov=u({token:s,factory:s.\u0275fac,providedIn:"root"})}}return s})();export{g as a,I as b};
